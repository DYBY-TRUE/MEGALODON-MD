import moment from 'moment-timezone';
import fs from 'fs';
import os from 'os';
import pkg from '@whiskeysockets/baileys';
const { generateWAMessageFromContent, proto } = pkg;
import config from '../config.cjs';
import axios from 'axios';

// Get total memory and free memory in bytes
const totalMemoryBytes = os.totalmem();
const freeMemoryBytes = os.freemem();

// Define unit conversions
const byteToKB = 1 / 1024;
const byteToMB = byteToKB / 1024;
const byteToGB = byteToMB / 1024;

// Function to format bytes to a human-readable format
function formatBytes(bytes) {
  if (bytes >= Math.pow(1024, 3)) {
    return (bytes * byteToGB).toFixed(2) + ' GB';
  } else if (bytes >= Math.pow(1024, 2)) {
    return (bytes * byteToMB).toFixed(2) + ' MB';
  } else if (bytes >= 1024) {
    return (bytes * byteToKB).toFixed(2) + ' KB';
  } else {
    return bytes.toFixed(2) + ' bytes';
  }
}

// Bot Process Time
const uptime = process.uptime();
const day = Math.floor(uptime / (24 * 3600)); // Calculate days
const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
const seconds = Math.floor(uptime % 60); // Calculate seconds

// Uptime
const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
const runMessage = `*‚òÄÔ∏è ${day} Day*\n*üïê ${hours} Hour*\n*‚è∞ ${minutes} Minutes*\n*‚è±Ô∏è ${seconds} Seconds*\n`;

const xtime = moment.tz("Africa/Nairobi").format("HH:mm:ss");
const xdate = moment.tz("Africa/Nairobi").format("DD/MM/YYYY");
const time2 = moment().tz("Africa/Nairobi").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

const menu = async (m, Matrix) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
  const mode = config.MODE === 'public' ? 'public' : 'private';
  const pref = config.PREFIX;

  const validCommands = ['dyby', 'menu', 'megalodon'];

  if (validCommands.includes(cmd)) {
    const str = `
‚ï≠‚îÅ‚îÅ‚îÅ„Äî *${config.BOT_NAME}* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚òÖ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÉ‚òÖ‚îÇ ·¥è·¥°…¥·¥á Ä : *${config.OWNER_NAME}*
‚îÉ‚òÖ‚îÇ ·¥ús·¥á Ä : *${m.pushName}*
‚îÉ‚òÖ‚îÇ  ô·¥Ä…™ ü·¥á ès : *Multi Device*
‚îÉ‚òÖ‚îÇ ·¥õ è·¥ò·¥á : *NodeJs*
‚îÉ‚òÖ‚îÇ ·¥ç·¥è·¥Ö·¥á : *${mode}*
‚îÉ‚òÖ‚îÇ ·¥ò ü·¥Ä·¥õ“ì·¥è Ä·¥ç : *${os.platform()}*
‚îÉ‚òÖ‚îÇ Prefix : [${prefix}]
‚îÉ‚òÖ‚îÇ ·¥†·¥á Äs…™·¥è…¥ : *1.0.0*
‚îÉ‚òÖ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îà‚ä∑

> ${pushwish} *${m.pushName}*!

‚ï≠‚îÅ‚îÅ„Äî ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥ò·¥ã
‚îÉ‚óà‚îÉ‚Ä¢ “ì·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ç·¥á·¥Ö…™·¥Ä“ì…™ Ä·¥á
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ò…™…¥·¥õ·¥á Ä·¥ás·¥õ·¥Ö ü
‚îÉ‚óà‚îÉ‚Ä¢ …¢…™·¥õ·¥Ñ ü·¥è…¥·¥á
‚îÉ‚óà‚îÉ‚Ä¢ …¢·¥Ö Ä…™·¥†·¥á
‚îÉ‚óà‚îÉ‚Ä¢ …™…¥s·¥õ·¥Ä
‚îÉ‚óà‚îÉ‚Ä¢  è·¥õ·¥ç·¥òùüπ
‚îÉ‚óà‚îÉ‚Ä¢  è·¥õ·¥ç·¥òùü∫
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ò ü·¥Ä è
‚îÉ‚óà‚îÉ‚Ä¢ s·¥è…¥…¢
‚îÉ‚óà‚îÉ‚Ä¢ ·¥†…™·¥Ö·¥á·¥è
‚îÉ‚óà‚îÉ‚Ä¢  è·¥õ·¥ç·¥òùüπ·¥Ö·¥è·¥Ñ
‚îÉ‚óà‚îÉ‚Ä¢  è·¥õ·¥ç·¥òùü∫·¥Ö·¥è·¥Ñ
‚îÉ‚óà‚îÉ‚Ä¢ ·¥õ…™·¥ã·¥õ·¥è·¥ã
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî ·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ·¥á Ä ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥õ·¥õ·¥ò
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥õ·¥õ·¥òùü∏
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥õ·¥õ·¥òùüπ
‚îÉ‚óà‚îÉ‚Ä¢ ·¥á ô…™…¥·¥Ä Ä è
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ö ô…™…¥·¥Ä Ä è
‚îÉ‚óà‚îÉ‚Ä¢ ·¥á·¥ç·¥è·¥ä…™·¥ç…™x
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ç·¥òùüπ
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî ·¥Ä…™ ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä…™
‚îÉ‚óà‚îÉ‚Ä¢  ô·¥ú…¢
‚îÉ‚óà‚îÉ‚Ä¢  Ä·¥á·¥ò·¥è Ä·¥õ
‚îÉ‚óà‚îÉ‚Ä¢ …¢·¥ò·¥õ
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ö·¥Ä ü ü·¥á
‚îÉ‚óà‚îÉ‚Ä¢  Ä·¥á·¥ç…™…¥…™
‚îÉ‚óà‚îÉ‚Ä¢ …¢·¥á·¥ç…™…¥…™
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî ·¥õ·¥è·¥è üs ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ñ·¥Ä ü·¥Ñ·¥ú ü·¥Ä·¥õ·¥è Ä
‚îÉ‚óà‚îÉ‚Ä¢ ·¥õ·¥á·¥ç·¥ò·¥ç·¥Ä…™ ü
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ñ ú·¥á·¥Ñ·¥ã·¥ç·¥Ä…™ ü
‚îÉ‚óà‚îÉ‚Ä¢ ·¥õ Ä·¥õ
‚îÉ‚óà‚îÉ‚Ä¢ ·¥õ·¥õs
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢  ü…™…¥·¥ã…¢·¥Ñ
‚îÉ‚óà‚îÉ‚Ä¢ s·¥á·¥õ·¥ò·¥ò…¢·¥Ñ
‚îÉ‚óà‚îÉ‚Ä¢ s·¥á·¥õ…¥·¥Ä·¥ç·¥á
‚îÉ‚óà‚îÉ‚Ä¢ s·¥á·¥õ·¥Ö·¥ás·¥Ñ
‚îÉ‚óà‚îÉ‚Ä¢ …¢ Ä·¥è·¥ú·¥ò
‚îÉ‚óà‚îÉ‚Ä¢ …¢·¥Ñs·¥á·¥õ·¥õ…™…¥…¢
‚îÉ‚óà‚îÉ‚Ä¢ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥Ö·¥Ö
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ã…™·¥Ñ·¥ã
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ã…™·¥Ñ·¥ã·¥Ä ü ü
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ä ü ü
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á·¥Ä ü ü
‚îÉ‚óà‚îÉ‚Ä¢  ú…™·¥Ö·¥á·¥õ·¥Ä…¢
‚îÉ‚óà‚îÉ‚Ä¢ ·¥õ·¥Ä…¢·¥Ä ü ü
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä…¥·¥õ…™ ü…™…¥·¥ã
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä…¥·¥õ…™·¥õ·¥èx…™·¥Ñ
‚îÉ‚óà‚îÉ‚Ä¢ …¢·¥á·¥õ ô…™·¥è
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî s·¥á·¥Ä Ä·¥Ñ ú ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ò ü·¥Ä è
‚îÉ‚óà‚îÉ‚Ä¢  è·¥õs
‚îÉ‚óà‚îÉ‚Ä¢ …™·¥ç·¥Ö ô
‚îÉ‚óà‚îÉ‚Ä¢ …¢·¥è·¥è…¢ ü·¥á
‚îÉ‚óà‚îÉ‚Ä¢ …¢…™·¥ç·¥Ä…¢·¥á
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ò…™…¥·¥õ·¥á Ä·¥ás·¥õ
‚îÉ‚óà‚îÉ‚Ä¢ ·¥°·¥Ä ü ü·¥ò·¥Ä·¥ò·¥á Ä
‚îÉ‚óà‚îÉ‚Ä¢ ·¥°…™·¥ã…™·¥ç·¥á·¥Ö…™·¥Ä
‚îÉ‚óà‚îÉ‚Ä¢  è·¥õs·¥á·¥Ä Ä·¥Ñ ú
‚îÉ‚óà‚îÉ‚Ä¢  Ä…™…¥…¢·¥õ·¥è…¥·¥á
‚îÉ‚óà‚îÉ‚Ä¢  ü è Ä…™·¥Ñs
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî ·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ò…™…¥…¢
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä ü…™·¥†·¥á
‚îÉ‚óà‚îÉ‚Ä¢ ·¥è·¥°…¥·¥á Ä
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ç·¥á…¥·¥ú
‚îÉ‚óà‚îÉ‚Ä¢ …™…¥“ì·¥è ô·¥è·¥õ
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî ·¥è·¥°…¥·¥á Ä ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ä·¥è…™…¥
‚îÉ‚óà‚îÉ‚Ä¢  ü·¥á·¥Ä·¥†·¥á
‚îÉ‚óà‚îÉ‚Ä¢  ô ü·¥è·¥Ñ·¥ã
‚îÉ‚óà‚îÉ‚Ä¢ ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã
‚îÉ‚óà‚îÉ‚Ä¢ s·¥á·¥õ·¥ò·¥ò ô·¥è·¥õ
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä…¥·¥õ…™·¥Ñ·¥Ä ü ü
‚îÉ‚óà‚îÉ‚Ä¢ s·¥á·¥õs·¥õ·¥Ä·¥õ·¥ús
‚îÉ‚óà‚îÉ‚Ä¢ s·¥á·¥õ…¥·¥Ä·¥ç·¥á ô·¥è·¥õ
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥ú·¥õ·¥è·¥õ è·¥ò…™…¥…¢
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä ü·¥°·¥Ä ès·¥è…¥ ü…™…¥·¥á
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥ú·¥õ·¥è Ä·¥á·¥Ä·¥Ö
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ä·¥ú·¥õ·¥ès·¥†…™·¥á·¥°
‚îÉ‚óà‚îÉ‚Ä¢ s·¥á·¥õs·¥ú·¥Ö·¥è 
‚îÉ‚óà‚îÉ‚Ä¢ ·¥Ö·¥á üs·¥ú·¥Ö·¥è
‚îÉ‚óà‚îÉ‚Ä¢  ü…™s·¥õs·¥ú·¥Ö·¥è
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî s·¥õ·¥Ä ü·¥ã ·¥ç·¥á…¥·¥ú „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ ·¥õ Ä·¥ú·¥á·¥Ñ·¥Ä ü ü·¥á Ä
‚îÉ‚óà‚îÉ‚Ä¢ …™…¥s·¥õ·¥Äs·¥õ·¥Ä ü·¥ã
‚îÉ‚óà‚îÉ‚Ä¢ …¢…™·¥õ ú·¥ú ôs·¥õ·¥Ä ü·¥ã
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ç·¥á…¢·¥Ä ü·¥è·¥Ö·¥è…¥ ·¥ç·¥Ö*`;

    // Check if MENU_IMAGE exists in config and is not empty
    let menuImage;
    if (config.MENU_IMAGE && config.MENU_IMAGE.trim() !== '') {
      try {
        // Try to fetch the image from URL
        const response = await axios.get(config.MENU_IMAGE, { responseType: 'arraybuffer' });
        menuImage = Buffer.from(response.data, 'binary');
      } catch (error) {
        console.error('Error fetching menu image from URL, falling back to local image:', error);
        menuImage = fs.readFileSync('https://files.catbox.moe/rful77.jpg');
      }
    } else {
      // Use local image if MENU_IMAGE is not configured
      menuImage = fs.readFileSync('https://files.catbox.moe/rful77.jpg');
    }

    await Matrix.sendMessage(m.from, {
      image: menuImage,
      caption: str,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363372853772240@newsletter',
          newsletterName: "MEGALODON-MD",
          serverMessageId: 143
        }
      }
    }, {
      quoted: m
    });

    // Send audio after sending the menu
    await Matrix.sendMessage(m.from, {
      audio: { url: 'https://files.catbox.moe/k9lgdw.mp3' },
      mimetype: 'audio/mp4',
      ptt: true
    }, { quoted: m });
  }
};

export default menu;
